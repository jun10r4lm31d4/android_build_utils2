name: Build Kernel

on:
  push:
    paths:
      - ".github/workflows/build_kernel.yml"
  workflow_dispatch:

env:
  ksu: "main"
  susfs: "v1.5.9"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      ksu_version: ${{ steps.get_ksu_version.outputs.ksu_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialize and Sync Kernel Source
        run: |
          sudo apt update -y && sudo apt install -y repo
          repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android13-5.15
          mkdir -p .repo/local_manifests && cp manifests/kernel.xml .repo/local_manifests/default.xml
          repo sync -c --force-sync --optimized-fetch --no-tags --no-clone-bundle --prune -j$(nproc --all)

      - name: Add KernelSU ${{ env.ksu }}
        working-directory: sm7550
        run: curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/refs/heads/main/kernel/setup.sh" | bash -s ${{ env.ksu }}

      - name: Get KernelSU Version
        id: get_ksu_version
        working-directory: sm7550/KernelSU
        run: echo "ksu_version=$(expr $(git rev-list --count HEAD) "+" 10200)" >> $GITHUB_OUTPUT

      - name: Add Configuration
        run: |
          cat << EOF >> sm7550/arch/arm64/configs/gki_defconfig
          # KernelSU
          CONFIG_KSU=y

          # tmpfs config
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y

          # Additional config
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y

          # BBR Config
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

          # Remove check_defconfig
          sed -i 's|check_defconfig||g' sm7550/build.config.gki

      - name: Remove -dirty from uname
        working-directory: sm7550
        run: sed -i 's| -dirty||g' scripts/setlocalversion

      - name: Compile Kernel
        run: LTO=thin BUILD_CONFIG=sm7550/build.config.gki.aarch64 build/build.sh

      - name: Copy Boot Image
        run: |
          mkdir artifacts && cd artifacts
          cp ../out/*/dist/boot.img Kernel.img

      - name: Checkout AnyKernel
        uses: actions/checkout@v4
        with:
          repository: Kernel-SU/AnyKernel3
          path: AnyKernel

      - name: Make AnyKernel Zip
        working-directory: AnyKernel
        run: |
          sed -i 's|^kernel\.string=.*|kernel.string=Kernel by SomeEmptyBox|' anykernel.sh
          sed -i 's|^do\.devicecheck=.*|do.devicecheck=1|' anykernel.sh
          sed -i 's|^device\.name1=.*|device.name1=eqe|' anykernel.sh
          cp ../out/*/dist/Image .
          zip -r ../artifacts/Kernel.zip .

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Download all artifacts
        uses: actions/download-artifact@main
        with:
          path: artifacts

      - name: Set Release Tag and Notes
        run: |
          echo "release=Kernel-${{ env.ksu }}-${{ env.susfs }}" >> $GITHUB_ENV
          cat << EOF > release_notes.md

          Kernel for Motorola Edge 50 Pro (eqe)

          Features:
          -> KernelSU-Next ${{ env.ksu }}
          -> SUSFS ${{ env.susfs }}
          -> BBR Support

          Links:
          -> [KernelSU Manager](https://github.com/5ec1cff/KernelSU/actions)
          -> [Kernel Flasher](https://github.com/fatalcoder524/KernelFlasher)
          -> [SUSFS Module](https://github.com/sidex15/susfs4ksu-module)
          -> [TCP Optimiser Module](https://github.com/fatalcoder524/TCP_Optimiser_Module)

          Notes:
          -> Kernel is built on stable release of KernelSU-Next and SUSFS
          -> Flash SUSFS Module and make sure SUS SU is enabled
          -> Flash TCP Optimiser Module and leave at default settings
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Kernel
          tag_name: ${{ env.release }}
          body_path: release_notes.md

      - name: Upload Release Assets
        run: |
          for file in $(find artifacts -type f); do
            echo "Uploading $file..."
            gh release upload "${{ env.release }}" "$file"
          done
        env:
          GH_TOKEN: ${{ github.token }}
